<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>eclipse的使用技巧</title>
      <link href="/2020/10/30/E_eclipse%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
      <url>/2020/10/30/E_eclipse%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
      
        <content type="html"><![CDATA[<blockquote><p>汇总eclipse使用技巧</p></blockquote><h5 id="切换工作空间，拷贝相应工作空间的样式-未掌握-每一个项目建立一个工作空间。"><a href="#切换工作空间，拷贝相应工作空间的样式-未掌握-每一个项目建立一个工作空间。" class="headerlink" title="切换工作空间，拷贝相应工作空间的样式(未掌握)每一个项目建立一个工作空间。"></a>切换工作空间，拷贝相应工作空间的样式(未掌握)<code>每一个项目建立一个工作空间。</code></h5><ul><li>File——-&gt;SwitchWorkspace</li><li>拷贝工作控件的样式.</li><li>将b工作空间的样式导入到a工作空间</li><li><a href="https://www.cnblogs.com/manuosex/p/3602262.html" target="_blank" rel="noopener">原文章</a><a id="more"></a></li></ul><h5 id="键盘小助手"><a href="#键盘小助手" class="headerlink" title="键盘小助手"></a>键盘小助手</h5><ul><li>显示行号(已掌握)<code>Ctrl+F10</code></li><li>智能提示(已掌握)<code>windows - Preferences - java - Editor - Content Assist</code></li></ul><h5 id="注释快捷键"><a href="#注释快捷键" class="headerlink" title="注释快捷键"></a>注释快捷键</h5><ul><li>Ctrl+/</li><li>Ctrl+Shift+/</li><li>Ctrl+Shift+\ <code>消除/* */注释</code></li><li>Ⅰctrl+m切换窗口视图 使其编辑窗口最大化。</li><li>ctrl+F6<code>切换到不同类的窗口中去</code></li><li>ctrl+shift+down<code>快速复制一行或者几行</code></li><li>alert+shift+s -&gt; 选择Override/Implement Methods… -&gt; 选择你需要重写的方法<code>重写父类快捷键</code></li><li>alt+shift+j<code>Javadoc 注释</code></li><li>alt+shift+z<code>导入模版,注意了要选中了</code></li><li>ctrl+shift+f4<code>关闭编辑的窗口</code></li><li>shift+alt+r<code>重命名</code></li><li>ctrl+q<code>回到上一次的编辑点</code></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2020年10月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Shell学习</title>
      <link href="/2020/10/27/S_Shell%E5%AD%A6%E4%B9%A0/"/>
      <url>/2020/10/27/S_Shell%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/sh</span></span><br><span class="line"><span class="built_in">cd</span> ~</span><br><span class="line">mkdir shell_tut</span><br><span class="line"><span class="built_in">cd</span> shell_tut</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (( i = 0; i &lt; 10; i++ )); <span class="keyword">do</span></span><br><span class="line">  <span class="comment">#statements</span></span><br><span class="line">  touch test_<span class="variable">$i</span>.txt</span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><ul><li>第1行：指定脚本解释器，这里是用/bin/sh做解释器的</li><li>第2行：切换到当前用户的home目录</li><li>第3行：创建一个目录shell_tut</li><li>第4行：切换到shell_tut目录</li><li>第5行：循环条件，一共循环10次</li><li>第6行：创建一个test_1…10.txt文件</li><li>第7行：循环体结束</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2020年10月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 2.0 依赖环境和项目结构介绍</title>
      <link href="/2020/09/10/J_SpringBoot2.0%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/"/>
      <url>/2020/09/10/J_SpringBoot2.0%E4%BE%9D%E8%B5%96%E7%8E%AF%E5%A2%83%E5%92%8C%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h4 id="基础环境升级"><a href="#基础环境升级" class="headerlink" title="基础环境升级"></a>基础环境升级</h4><ul><li><a href="https://www.oracle.com/java/technologies/javase/javase-jdk8-downloads.html" target="_blank" rel="noopener">JDK1.8</a></li><li><a href="http://maven.apache.org/download.cgi" target="_blank" rel="noopener">Maven</a><ul><li><a href="https://www.jetbrains.com/idea/download/#section=windows" target="_blank" rel="noopener">IntelliJ IDEA 2018</a></li></ul></li></ul>  <a id="more"></a><h4 id="项目结构介绍"><a href="#项目结构介绍" class="headerlink" title="项目结构介绍"></a>项目结构介绍</h4><ul><li>pring Boot 的基础结构共三个文件，具体如下：<ul><li>src/main/java：程序开发以及主程序入口；</li><li>src/main/resources：配置文件；</li><li>src/test/java：测试程序。</li></ul></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">myproject</span><br><span class="line">  +-src    </span><br><span class="line">    +- main         </span><br><span class="line">      +- java              </span><br><span class="line">        +-com.example.myproject                  +- comm                    </span><br><span class="line">          +- model                    </span><br><span class="line">          +- repository                    +- service                    </span><br><span class="line">          +- web                    </span><br><span class="line">          +- Application.java         </span><br><span class="line">      +- resources              </span><br><span class="line">        +- static              </span><br><span class="line">        +- templates              </span><br><span class="line">        +- application.properties    </span><br><span class="line">    +- <span class="built_in">test</span></span><br><span class="line">  +-pom.xml</span><br></pre></td></tr></table></figure><h5 id="com-example-myproject目录下："><a href="#com-example-myproject目录下：" class="headerlink" title="com.example.myproject目录下："></a>com.example.myproject目录下：</h5><ul><li>Application.java，建议放到根目录下面，是项目的启动类</li><li>comm 目录建议放置公共的类，如全局的配置文件工具类等；</li><li>model 目录主要用于实体（Entity）与数据访问层（Repository）；</li><li>repository 层主要是数据库访问层代码；</li><li>service 层主要是业务类代码；</li><li>web 层负责⻚页⾯面访问控制。</li></ul><h5 id="resources-目录下："><a href="#resources-目录下：" class="headerlink" title="resources 目录下："></a>resources 目录下：</h5><ul><li>static 目录存放 web 访问的静态资源，如 js、css、图片等；</li><li>templates 目录存放页面模板；</li><li>application.properties 存放项目的配置信息。<blockquote><p>test 目录存放单元测试的代码；</p></blockquote></li></ul><blockquote><p>pom.xml 用于配置项目依赖包，以及其他配置。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 2020年9月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 2.0 的更新</title>
      <link href="/2020/09/07/J_SpringBoot2.0%E6%9B%B4%E6%96%B0/"/>
      <url>/2020/09/07/J_SpringBoot2.0%E6%9B%B4%E6%96%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="基础环境升级"><a href="#基础环境升级" class="headerlink" title="基础环境升级"></a>基础环境升级</h4><ul><li><p>最低JDK8</p><a id="more"></a></li><li>Spring Boot 2.0 基于 Spring Framework 5 构建，Spring Boot2.0更新<ul><li>Jetty 开源的Servlet容器,例如JSP和Servlet</li><li>Tomcat 8.5</li><li>Flyway5 数据库版本管理理工具.</li><li>Hibernate5.2</li><li>Gradle3.4</li><li>Thymeleaf3.0</li></ul></li></ul><ul><li>HikariCP HikariCP 是一个高性能的 JDBC 连接池</li><li>Security 包含ACLs、LDAP、JAAS、CAS</li><li>OAuth 2 OAuth 2 是一个授权框架，或称授权标准，它可以使第三方应用程序或客户端获得对 HTTP 服务上（如Google、GitHub ）用户帐户信息的有限访问权限。</li><li>Micrometer 是一款监控指标的度量量类库，可以让你在没有供应商锁定的情况下对 JVM 的应⽤用程序代码进行调整。</li><li>Redis 默认使用Lettuce</li><li>配置属性绑定</li><li>转换器支持</li><li>Actuator 改进</li><li>测试</li><li>支持 HTTP/2</li><li>嵌入式 Netty服务器</li><li>Kotlin</li><li>JOOQ 的支持</li><li>支持 Quartz</li><li>响应式编程</li><li>Spring Boot 2.0 支持了了动态 Gif 的启动 Logo 打印。</li><li>启动类 SpringBootServletInitializer</li><li>Spring Boot 2.0 默认不不包含 log4j，建议使⽤用 slf4jThymeleaf 3.0 默认不不包含布局模块配置⽂文件</li><li>Thymeleaf 3.0 默认不不包含布局模块配置文件</li><li>配置文件,⼤大量量的 Servlet 专属的 server.<em> 被移到了了 server.servlet.</em> 下</li><li>WebMvcConfigurerAdapter 过期</li><li>Spring Boot JPA 变化,掉了了 xxxOne() 方法,delete() 方法和 findOne() 类似也被去掉了，可以使用 deleteById(Long id) 来替换，还有一个不同点是deleteById(Long id) 默认实现返回值为 void</li><li>需要指定主键的自增策略</li><li>分页组件 PageRequest 变化在</li><li>JPA 关联查询</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2020年9月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 产生的背景和它的设计理理念</title>
      <link href="/2020/09/07/J_SpringBoot%E7%AE%80%E4%BB%8B/"/>
      <url>/2020/09/07/J_SpringBoot%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="约定优于配置"><a href="#约定优于配置" class="headerlink" title="约定优于配置"></a>约定优于配置</h4><ul><li><p>本质是说，开发人员仅需规定应用中不符约定的部分。例如，如果模型中有个名为 User 的类，那么数据库中对应的表就会默认命名为 user。只有在偏离这一约定时，例如将该表命名为“user_info”，才需写有关这个名字的配置。</p><a id="more"></a></li><li><p>我们可以按照这个思路来设想，我们约定 Controller 层就是 Web 请求层可以省略 MVC 的配置；我们约定在Service 结尾的类自动注入事务，就可以省略了 <a href="https://my.oschina.net/haogrgr/blog/308199" target="_blank" rel="noopener">Spring 的切面事务配置</a>.</p></li><li><p>在 Spring 体系中，Spring Boot JPA 就是约定优于配置最佳实现之一，不需要关注表结构，我们约定类名即是表名，属性名即是表的字段，String 对应 varchar，long 对应 bigint，只有需要一些特殊要求的属性，我们再单独进行配置，按照这个约定我们可以将以前的工作简化。</p></li><li><p>Spring Boot Starters 基于约定优于配置的理理念来设计，Spring Boot Starter 中有两个核心组件：自动配置代码和提供自动配置模块及其它有用的依赖。</p></li></ul><h4 id="Spring、Spring-Boot-和-Spring-Cloud-的关系"><a href="#Spring、Spring-Boot-和-Spring-Cloud-的关系" class="headerlink" title="Spring、Spring Boot 和 Spring Cloud 的关系"></a>Spring、Spring Boot 和 Spring Cloud 的关系</h4><ul><li><p>Spring 最初核心的两大核心功能 Spring IoC 和 Spring Aop 成就了 Spring.</p></li><li><p>Spring Cloud 是一系列框架的有序集合，它利用 Spring Boot 的开发便利利性巧妙地简化了了分布式系统基础设施的开发，如服务发现注册、配置中心、消息总线、负载均衡、断路路器器、数据监控等，都可以用 Spring Boot的开发风格做到一键启动和部署。</p></li></ul><blockquote><p>它们的关系`Spring IoC&gt;Spring&gt;SpringBoot&gt;SpringCloud</p></blockquote><blockquote><p>转载<a href="https://github.com/ityouknow/spring-boot-examples" target="_blank" rel="noopener">https://github.com/ityouknow/spring-boot-examples</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 2020年9月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java几道算法题</title>
      <link href="/2020/06/26/J_%E7%AE%97%E6%B3%951/"/>
      <url>/2020/06/26/J_%E7%AE%97%E6%B3%951/</url>
      
        <content type="html"><![CDATA[<h4 id="题1"><a href="#题1" class="headerlink" title="题1"></a>题1</h4><blockquote><p>“百钱买百鸡”是我国古代的著名数学题。题目这样描述：3文钱可以买1只公鸡，2文钱可以买一只母鸡，1文钱可以买3只小鸡。用100 文钱买100 只鸡，那么各有公鸡、母鸡、小鸡多少只？<br><a id="more"></a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class ANS12&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//定义变量</span><br><span class="line">//公鸡</span><br><span class="line">int x=0;</span><br><span class="line">//母鸡</span><br><span class="line">int y=0;</span><br><span class="line">//小鸡</span><br><span class="line">int z=0;</span><br><span class="line"></span><br><span class="line">//</span><br><span class="line"><span class="keyword">for</span>(x=0;x&lt;=33;x++)&#123;//表示的是公鸡的范围</span><br><span class="line"><span class="keyword">for</span>(y=0;y&lt;=50;y++)&#123;//表示的是母鸡的范围</span><br><span class="line">//小鸡</span><br><span class="line">z=100-x-y;</span><br><span class="line">//保证小鸡被3整除</span><br><span class="line"><span class="keyword">if</span>(z%3==0)&#123;</span><br><span class="line">//判断条件</span><br><span class="line"><span class="keyword">if</span>(3*x+2*y+(z/3)==100)&#123;</span><br><span class="line">System.out.println(<span class="string">"公鸡："</span>+x+<span class="string">",母鸡："</span>+y+<span class="string">",小鸡："</span>+z);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>读入一个整数n，输出如下图形:<br>当输入 n=3时，输出:<br>    *</p></blockquote><hr><hr><p>当输入 n=4时，输出:<br>    *</p><hr><hr><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class ANS15&#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//</span><br><span class="line">int n=5;</span><br><span class="line">//打印图形</span><br><span class="line"><span class="keyword">for</span>(int i=1;i&lt;=n;i++)&#123;//控制行数</span><br><span class="line">//打印空格</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;n-i;j++)&#123;</span><br><span class="line">System.out.print(<span class="string">" "</span>);</span><br><span class="line">&#125;</span><br><span class="line">//打印星星</span><br><span class="line"><span class="keyword">for</span>(int z=1;z&lt;=2*i-1;z++)&#123;</span><br><span class="line">System.out.print(<span class="string">"*"</span>);</span><br><span class="line">&#125;</span><br><span class="line">//换行</span><br><span class="line">System.out.println();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2020年6月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java中标识符定义的规则</title>
      <link href="/2020/06/25/J_%E6%A0%87%E8%AF%86%E7%AC%A6/"/>
      <url>/2020/06/25/J_%E6%A0%87%E8%AF%86%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h4 id="Java中标识符定义的规则"><a href="#Java中标识符定义的规则" class="headerlink" title="Java中标识符定义的规则"></a>Java中标识符定义的规则</h4><blockquote><p>由大小写字母、数字、下划线、和美元符号组成，但不能以数字开头。标识符不能使用java中的关键字。</p></blockquote><ol><li><p>类和接口名。每个字的首字母大写，含有大小写zhi。例如，MyClass，HelloWorld，Time等。</p></li><li><p>方法名。dao首字符小写，其余的首字母大写，含大小写。尽量少用下划线。例如，myName，setTime等。这种命名方法叫做驼峰式命名。</p></li><li><p>常量名。基本数据类型的常量名使用全部大写字母，字与字之间用下划线分隔。对象常量可大小混写。例如，SIZE_NAME。</p></li><li><p>变量名。可大小写混写，首字符小写，字间分隔符用字的首字母大写。不用下划线，少用美元符号。给变量命名是尽量做到见名知义。<br>-</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2020年6月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java关键字</title>
      <link href="/2020/06/25/J_%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>/2020/06/25/J_%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h4 id="java方法的返回"><a href="#java方法的返回" class="headerlink" title="java方法的返回"></a>java方法的返回</h4><blockquote><p>在java中被赋予了特殊含义的单词一共有53个、const和goto都是保留字、都是小写</p></blockquote><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">关键字含义</span><br><span class="line">abstract表明类或者成员方法具有抽象属性</span><br><span class="line">assert断言，用来进行程序调试</span><br><span class="line">boolean基本数据类型之一，声明布尔类型的关键字</span><br><span class="line"><span class="built_in">break</span>提前跳出一个块</span><br><span class="line">byte基本数据类型之一，字节类型</span><br><span class="line"><span class="keyword">case</span>用在switch语句之中，表示其中的一个分支</span><br><span class="line">catch用在异常处理中，用来捕捉异常</span><br><span class="line">char基本数据类型之一，字符类型</span><br><span class="line">class声明一个类</span><br><span class="line">const保留关键字，没有具体含义</span><br><span class="line"><span class="built_in">continue</span>回到一个块的开始处</span><br><span class="line">default默认，例如，用在switch语句中，表明一个默认的分支。Java8 中也作用于声明接口函数的默认实现</span><br><span class="line"><span class="keyword">do</span>用在<span class="keyword">do</span>-while循环结构中</span><br><span class="line">double基本数据类型之一，双精度浮点数类型</span><br><span class="line"><span class="keyword">else</span>用在条件语句中，表明当条件不成立时的分支</span><br><span class="line">enum枚举</span><br><span class="line">extends表明一个类型是另一个类型的子类型。对于类，可以是另一个类或者抽象类；对于接口，可以是另一个接口</span><br><span class="line">final用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变，用来定义常量</span><br><span class="line">finally用于处理异常情况，用来声明一个基本肯定会被执行到的语句块</span><br><span class="line"><span class="built_in">float</span>基本数据类型之一，单精度浮点数类型</span><br><span class="line"><span class="keyword">for</span>一种循环结构的引导词</span><br><span class="line">goto保留关键字，没有具体含义</span><br><span class="line"><span class="keyword">if</span>条件语句的引导词</span><br><span class="line">implements表明一个类实现了给定的接口</span><br><span class="line">import表明要访问指定的类或包</span><br><span class="line">instanceof用来测试一个对象是否是指定类型的实例对象</span><br><span class="line">int基本数据类型之一，整数类型</span><br><span class="line">interface接口</span><br><span class="line">long基本数据类型之一，长整数类型</span><br><span class="line">native用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</span><br><span class="line">new用来创建新实例对象</span><br><span class="line">package包</span><br><span class="line">private一种访问控制方式：私用模式</span><br><span class="line">protected一种访问控制方式：保护模式</span><br><span class="line">public一种访问控制方式：共用模式</span><br><span class="line"><span class="built_in">return</span>从成员方法中返回数据</span><br><span class="line">short基本数据类型之一,短整数类型</span><br><span class="line">static表明具有静态属性</span><br><span class="line">strictfp用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</span><br><span class="line">super表明当前对象的父类型的引用或者父类型的构造方法</span><br><span class="line">switch分支语句结构的引导词</span><br><span class="line">synchronized表明一段代码需要同步执行</span><br><span class="line">this指向当前实例对象的引用</span><br><span class="line">throw抛出一个异常</span><br><span class="line">throws声明在当前定义的成员方法中所有需要抛出的异常</span><br><span class="line">transient声明不用序列化的成员域</span><br><span class="line">try尝试一个可能抛出异常的程序块</span><br><span class="line">void声明当前成员方法没有返回值</span><br><span class="line">volatile表明两个或者多个变量必须同步地发生变化</span><br><span class="line"><span class="keyword">while</span>用在循环结构中;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2020年6月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装python</title>
      <link href="/2020/04/11/P_%E5%AE%89%E8%A3%85python3.8%E7%89%88%E6%9C%AC/"/>
      <url>/2020/04/11/P_%E5%AE%89%E8%A3%85python3.8%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<blockquote><p>前言:以前有用过python,但是很久没用了,电脑上自带python2.7和3.7版本,然后再次安装3.8的时候,就提示我有问题,于是,去网上找了下安装教程.记录一下</p></blockquote><a id="more"></a><h4 id="关于旧版本"><a href="#关于旧版本" class="headerlink" title="关于旧版本"></a>关于旧版本</h4><ul><li>在出问题后,我把旧版本全部卸掉了,这花费了我一个上午的时间,我本来以为我能修复的,结果没有成功,还是卸了省心,再重新安装一个新的</li></ul><h4 id="python3-8的安装包"><a href="#python3-8的安装包" class="headerlink" title="python3.8的安装包"></a>python3.8的安装包</h4><ul><li>这个安装包我本来想在官网上下载的,但是下载的网速实在受不了,太慢了,所以自己在国内网站上下载了一个.</li></ul><h4 id="题记"><a href="#题记" class="headerlink" title="题记"></a>题记</h4><ul><li>我的脑子一直比较混乱,反正这个也是写给我自己看得,我就吐槽下自己.想要学习,但是不知道学习什么,想要赚钱,但是也赚不了钱,一直处在能温饱的状态.</li><li>不会面对面沟通,会紧张,还是学习写代码吧,至少他是个可爱的东西.</li></ul><h5 id="开始正式安装"><a href="#开始正式安装" class="headerlink" title="开始正式安装"></a>开始正式安装</h5><blockquote><p>下面的东西,我是从别人的网上摘录下来的,经过我的亲身验证,保证可行,图片就弄了,国内访问github太卡了,我最近都从码云那边git代码了.对梯子没多大欲望,因为日常的可以满足.</p></blockquote><ul><li><p>版本,加入网速过关,可以去官网下载,下载32bit的,因为兼容性好.</p></li><li><p>安装步骤:</p><ul><li>双击安装文件python-3.8.2-amd32.exe</li><li>勾选下方“Add Python 3.8 to PATH”，并选择“Customize installation”,为了不用自己去弄环境变量,原作者如是说</li></ul></li><li><p>把Optional Features全部勾选上，点击“Next”</p></li><li><p>Advanced Options勾选2/3/4项，然后选择安装路径，点击”Install“，等待安装完成</p></li><li><p>页面出现Successful字样，说明安装成功。</p></li><li><p>按win+R，输入”cmd“，回车，输入”python“，如果能如下正常回显，则成功</p></li></ul><p><a href="https://www.cnblogs.com/zxwbky/archive/2020/01/14/12193866.html" target="_blank" rel="noopener">原文章链接地址</a></p>]]></content>
      
      
      <categories>
          
          <category> 2020年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc回顾</title>
      <link href="/2020/03/16/J_springmvc%E5%9B%9E%E9%A1%BE/"/>
      <url>/2020/03/16/J_springmvc%E5%9B%9E%E9%A1%BE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>没弄好,里面代码忘了很多,弄个接近的springboot还失败了,伤心…</p></blockquote><a id="more"></a><h4 id="springmvc回顾"><a href="#springmvc回顾" class="headerlink" title="springmvc回顾"></a>springmvc回顾</h4><ul><li>我现在码云上下载了源码和数据库数据,为什么不在github上下载呢,因为网速太慢,下了一般就跪了.</li><li>我先把代码复制到eclipse中,把数据库的数据放到数据库里.</li><li>把apache里的setting.xml镜像改成阿里云的地址,然后update项目里的资源,就可以打开网站了.<h4 id="我介绍下springmvc的大致流程"><a href="#我介绍下springmvc的大致流程" class="headerlink" title="我介绍下springmvc的大致流程"></a>我介绍下springmvc的大致流程</h4></li><li>先配置apache,再新建一个maven项目<ul><li><code>pom.xml报错web.xml is missing and &lt;failOnMissingWebXml&gt; is set to true</code>问题,右击项目——&gt;Java EE Tools——&gt;Generate Deployment Descriptor Stub.然后系统会在src/main/webapp/WEB_INF文件加下创建web.xml文件。</li></ul></li><li>新建一个db.properties,用于连接数据库</li><li>新建srping-aop.xml文件,spring-dap.xml文件,spring-mvc.xml文件,spring-service.xml文件</li><li>新建mappers,用于写数据库的sql语言</li><li>写bean,和那些spring联合</li><li>写mapper持久层</li><li>写service服务层</li><li>写Exception异常</li><li>写controller控制层<blockquote><p>写登录控制器<br>切片啥的,我现在也是迷迷糊糊的</p></blockquote></li><li>把html改成jsp</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2020年3月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>反编译简单APK</title>
      <link href="/2019/12/07/J_%E5%8F%8D%E7%BC%96%E8%AF%91%E7%AE%80%E5%8D%95apk/"/>
      <url>/2019/12/07/J_%E5%8F%8D%E7%BC%96%E8%AF%91%E7%AE%80%E5%8D%95apk/</url>
      
        <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><ul><li>反编译出来后,我还是没有把一个简单那的apk程序还原,正在探索中…<a id="more"></a></li></ul><h4 id="准备必要工具"><a href="#准备必要工具" class="headerlink" title="准备必要工具"></a>准备必要工具</h4><ol><li><a href="https://bitbucket.org/iBotPeaches/apktool/downloads" target="_blank" rel="noopener">apktool</a><blockquote><p>作用：资源文件获取，可以提取出图片文件和布局文件进行使用查看</p></blockquote></li></ol><ol start="2"><li><p><a href="http://sourceforge.net/projects/dex2jar/files/" target="_blank" rel="noopener">dex2jar</a></p><blockquote><p>作用：将apk反编译成java源码（classes.dex转化成jar文件）</p></blockquote></li><li><p><a href="http://jd.benow.ca/" target="_blank" rel="noopener">jd-gui</a></p><blockquote><p>作用：查看APK中classes.dex转化成出的jar文件，即源码文件</p></blockquote></li><li><p>将【dex2jar-2.0.zip】和【jd-gui-windows-1.3.0.zip】分别解压</p></li></ol><ol start="5"><li><p>进入CMD命令行,来到apktool_2.0.1.jar目录下,运行<code>java -jar jar包名.jar</code></p><blockquote><p>使用如下的命令运行apktool_2.0.1.jar反编译<br><code>java -jar apktool_2.0.1.jar d -f E:\AndroidDevelopTool\Android反编译工具包\测试apk\demo.apk -o demo</code></p></blockquote></li><li><p>使用dex2jar反编译apk得到Java源代码</p><ul><li>将要反编译的APK后缀名改为.rar或者 .zip，并解压，得到其中的classes.dex文件</li><li>将获取到的classes.dex放到之前解压出来的工具【dex2jar-2.0】文件夹内</li><li>在命令行下定位到dex2jar.bat所在目录，输入”d2j-dex2jar classes.dex</li><li>命令执行完成之后，在当前目录下就可以看到生成的Jar文件了</li><li>反编译classes.dex得到classes-dex2jar.jar文件之后，就可以使用【jd-gui】工具将class文件反编译成java源代码了</li></ul></li><li><p><a href="https://blog.csdn.net/s13383754499/article/details/78914592" target="_blank" rel="noopener">转载</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2019年12月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse搭建SpringBoot之HelloWorld(转载)</title>
      <link href="/2019/10/29/J_SpringBoot%E7%9A%84HelloWorld/"/>
      <url>/2019/10/29/J_SpringBoot%E7%9A%84HelloWorld/</url>
      
        <content type="html"><![CDATA[<h4 id="HelloWorld"><a href="#HelloWorld" class="headerlink" title="HelloWorld"></a>HelloWorld</h4><ul><li>首先新建Maven工程<a id="more"></a></li></ul> <!-- more --><ul><li><p>勾选第一个按钮，第三个是选择working set ，你可以不选</p></li><li><p>下一步，配置工程信息，注意打包为jar</p></li><li><p>打开pom.xml文件，添加spring-boot依赖</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">        &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;</span><br><span class="line">        &lt;version&gt;1.5.9.RELEASE&lt;/version&gt;</span><br><span class="line">    &lt;/parent&gt;</span><br><span class="line">    &lt;dependencies&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">        &lt;dependency&gt;</span><br><span class="line">            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">            &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;</span><br><span class="line">        &lt;/dependency&gt;</span><br><span class="line">    &lt;/dependencies&gt;</span><br><span class="line"></span><br><span class="line">    &lt;build&gt;</span><br><span class="line">        &lt;plugins&gt;</span><br><span class="line">            &lt;plugin&gt;</span><br><span class="line">                &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">                &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;</span><br><span class="line">            &lt;/plugin&gt;</span><br><span class="line">        &lt;/plugins&gt;</span><br><span class="line">    &lt;/build&gt;</span><br></pre></td></tr></table></figure></li><li><p>新建文件src/main/hello/HelloController.java</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">package hello;</span><br><span class="line"></span><br><span class="line">import org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line">import org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(<span class="string">"/"</span>)</span><br><span class="line">    public String <span class="function"><span class="title">hello</span></span>()&#123;</span><br><span class="line">        <span class="built_in">return</span> <span class="string">"Greetings from Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>新建src/main/hello/Application.java</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">package hello;</span><br><span class="line"></span><br><span class="line">import org.springframework.boot.SpringApplication;</span><br><span class="line">import org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line">@SpringBootApplication</span><br><span class="line">public class Application &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        // http://localhost:8080/</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>运行Application</li><li>访问localhost:8080/<br>-<a href="https://www.cnblogs.com/xianfengzhike/p/9159132.html" target="_blank" rel="noopener">原文有图</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2019年10月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 问题集001</title>
      <link href="/2019/10/28/J_SpringBootProblem001/"/>
      <url>/2019/10/28/J_SpringBootProblem001/</url>
      
        <content type="html"><![CDATA[<h4 id="新建Maven项目时，每个pom文件第一行都报错"><a href="#新建Maven项目时，每个pom文件第一行都报错" class="headerlink" title="新建Maven项目时，每个pom文件第一行都报错"></a>新建Maven项目时，每个pom文件第一行都报错</h4><blockquote><p>java报错 pom.xml第一行报”org.apache.maven.archiver.MavenArchiver.getManifest(org.apache.maven.project…(转载)</p></blockquote><a id="more"></a><h5 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h5><ul><li>原因就是你的maven的配置文件不是最新的</li></ul><h5 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h5><ul><li>更新eclipse中的maven插件</li><li>Help——&gt;Install New SoftWare</li><li>点击 Add,添加配置信息</li><li>name为 MavenArchiver</li><li>Location中输入</li></ul><blockquote><p><a href="http://repo1.maven.org/maven2/.m2e/connectors/m2eclipse-mavenarchiver/0.17.2/N/LATEST/" target="_blank" rel="noopener">http://repo1.maven.org/maven2/.m2e/connectors/m2eclipse-mavenarchiver/0.17.2/N/LATEST/</a></p></blockquote><ul><li>点击 next 前，将 eclipse Install 窗口右下角的 Contact all update sites during install to find required software 选项取消掉。</li><li>一直next confirm 安装更新 提示重启eclipse 然后再右键项目maven update project</li><li><a href="https://www.cnblogs.com/appium/p/11168441.html" target="_blank" rel="noopener">原文</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2019年10月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springmvc和springboot的区别</title>
      <link href="/2019/10/27/J_springmvc%E5%92%8Cspringboot%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2019/10/27/J_springmvc%E5%92%8Cspringboot%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>Spring 是一个“引擎”；</p></blockquote><blockquote><p>Spring MVC 是基于Spring的一个 MVC 框架 ；</p></blockquote><blockquote><p>Spring Boot 是基于Spring4的条件注册的一套快速开发整合包。</p></blockquote><a id="more"></a><h5 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h5><ul><li><p>我以前学过Spring MVC,不过那些配置都是Copy过来的,反正都不知道那些配置是做什么的(忘的差不多了),还不如直接用Spring Boot(下面文章是转载来的)</p></li><li><p>Spring 框架就像一个家族，有众多衍生产品例如 boot、security、jpa等等。但他们的基础都是Spring 的 ioc和 aop ioc 提供了依赖注入的容器 aop ，解决了面向横切面的编程，然后在此两者的基础上实现了其他延伸产品的高级功能。Spring MVC是基于 Servlet 的一个 MVC 框架 主要解决 WEB 开发的问题，因为 Spring 的配置非常复杂，各种XML、 JavaConfig、hin处理起来比较繁琐。于是为了简化开发者的使用，从而创造性地推出了Spring boot，约定优于配置，简化了spring的配置流程。</p></li><li><p>说得更简便一些：Spring 最初利用“工厂模式”（DI）和“代理模式”（AOP）解耦应用组件。大家觉得挺好用，于是按照这种模式搞了一个 MVC框架（一些用Spring 解耦的组件），用开发 web 应用（ SpringMVC ）。然后有发现每次开发都写很多样板代码，为了简化工作流程，于是开发出了一些“懒人整合包”（starter），这套就是 Spring Boot。</p></li></ul><h6 id="Spring-MVC的功能"><a href="#Spring-MVC的功能" class="headerlink" title="Spring MVC的功能"></a>Spring MVC的功能</h6><ul><li>Spring MVC提供了一种轻度耦合的方式来开发web应用。</li><li>Spring MVC是Spring的一个模块，式一个web框架。通过Dispatcher Servlet, ModelAndView 和 View Resolver，开发web应用变得很容易。解决的问题领域是网站应用程序或者服务开发——URL路由、Session、模板引擎、静态Web资源等等。</li></ul><h6 id="Spring-Boot的功能"><a href="#Spring-Boot的功能" class="headerlink" title="Spring Boot的功能"></a>Spring Boot的功能</h6><ul><li>Spring Boot实现了自动配置，降低了项目搭建的复杂度。</li><li><p>众所周知Spring框架需要进行大量的配置，Spring Boot引入自动配置的概念，让项目设置变得很容易。Spring Boot本身并不提供Spring框架的核心特性以及扩展功能，只是用于快速、敏捷地开发新一代基于Spring框架的应用程序。也就是说，它并不是用来替代Spring的解决方案，而是和Spring框架紧密结合用于提升Spring开发者体验的工具。同时它集成了大量常用的第三方库配置(例如Jackson, JDBC, Mongo, Redis, Mail等等)，Spring Boot应用中这些第三方库几乎可以零配置的开箱即用(out-of-the-box)，大部分的Spring Boot应用都只需要非常少量的配置代码，开发者能够更加专注于业务逻辑。</p></li><li><p>Spring Boot只是承载者，辅助你简化项目搭建过程的。如果承载的是WEB项目，使用Spring MVC作为MVC框架，那么工作流程和你上面描述的是完全一样的，因为这部分工作是Spring MVC做的而不是Spring Boot。</p></li><li><p>对使用者来说，换用Spring Boot以后，项目初始化方法变了，配置文件变了，另外就是不需要单独安装Tomcat这类容器服务器了，maven打出jar包直接跑起来就是个网站，但你最核心的业务逻辑实现与业务流程实现没有任何变化。</p></li><li><a href="https://www.cnblogs.com/zhonglihai/p/9109413.html" target="_blank" rel="noopener">引用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 2019年10月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2019/05/04/J_javaDemo/"/>
      <url>/2019/05/04/J_javaDemo/</url>
      
        <content type="html"><![CDATA[<h4 id="java方法的返回"><a href="#java方法的返回" class="headerlink" title="java方法的返回"></a>java方法的返回</h4><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Demo &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">int a = 1;</span><br><span class="line">String b = <span class="string">"abc"</span>;</span><br><span class="line">Point p = new Point(1,2);</span><br><span class="line">Collection c = new ArrayList();</span><br><span class="line">c.add(p);</span><br><span class="line">dosome(a,b,p,c);</span><br><span class="line">System.out.println(<span class="string">"a:"</span>+a);</span><br><span class="line">System.out.println(<span class="string">"b:"</span>+b);</span><br><span class="line">System.out.println(<span class="string">"p:"</span>+p);</span><br><span class="line">System.out.println(<span class="string">"c:"</span>+c);</span><br><span class="line">&#125;</span><br><span class="line">public static void dosome(int a,String b,Point p,Collection c)&#123;</span><br><span class="line">a = a + 1;</span><br><span class="line">b = b + <span class="string">"!"</span>;</span><br><span class="line">p.setX(2);</span><br><span class="line">p = new Point(3,4);</span><br><span class="line">c.clear();</span><br><span class="line">c.add(p);</span><br><span class="line">c = new ArrayList();</span><br><span class="line">c.add(new Point(5,6));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="重写Point方法"><a href="#重写Point方法" class="headerlink" title="重写Point方法"></a>重写Point方法</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">public class Point &#123;</span><br><span class="line">private int x;</span><br><span class="line">private int y;</span><br><span class="line">public Point(int x, int y) &#123;</span><br><span class="line">super();</span><br><span class="line">this.x = x;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">public int <span class="function"><span class="title">getX</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line">public void setX(int x) &#123;</span><br><span class="line">this.x = x;</span><br><span class="line">&#125;</span><br><span class="line">public int <span class="function"><span class="title">getY</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> y;</span><br><span class="line">&#125;</span><br><span class="line">public void setY(int y) &#123;</span><br><span class="line">this.y = y;</span><br><span class="line">&#125;</span><br><span class="line">public String <span class="function"><span class="title">toString</span></span>() &#123;</span><br><span class="line"><span class="built_in">return</span> <span class="string">"("</span>+x+<span class="string">","</span>+y+<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line">public boolean equals(Object o)&#123;</span><br><span class="line"><span class="keyword">if</span>(o==null)&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(o==this)&#123;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(o instanceof Point)&#123;</span><br><span class="line">Point p = (Point)o;</span><br><span class="line"><span class="built_in">return</span> p.x==this.x&amp;&amp;p.y==this.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a:1</span><br><span class="line">b:abc</span><br><span class="line">p:(2,2)</span><br><span class="line">c:[(3,4)]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019年5月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>简易聊天室</title>
      <link href="/2019/05/03/J_%E8%81%8A%E5%A4%A9%E5%AE%A4/"/>
      <url>/2019/05/03/J_%E8%81%8A%E5%A4%A9%E5%AE%A4/</url>
      
        <content type="html"><![CDATA[<h4 id="聊天室服务端"><a href="#聊天室服务端" class="headerlink" title="聊天室服务端"></a>聊天室服务端</h4><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line">public class Server &#123;</span><br><span class="line">/*</span><br><span class="line"> * 运行在服务端的ServerSocket</span><br><span class="line"> * 有两个主要作用:</span><br><span class="line"> * 1:向系统申请对外的服务端口,客户端就是通过</span><br><span class="line"> *   这个端口与服务端建立连接的.</span><br><span class="line"> * 2:监听服务端口,等待客户端连接.一旦一个客户端</span><br><span class="line"> *   通过Socket与服务端建立连接,那么ServerSocket</span><br><span class="line"> *   会创建一个Socket与该客户端通讯.  </span><br><span class="line"> */</span><br><span class="line">private ServerSocket server;</span><br><span class="line">/*</span><br><span class="line"> * 该数组用于存放所有客户端的输出流</span><br><span class="line"> */</span><br><span class="line">//private PrintWriter[] allOut = new PrintWriter[0];</span><br><span class="line">private List&lt;PrintWriter&gt; allOut</span><br><span class="line">= new ArrayList&lt;PrintWriter&gt;();</span><br><span class="line"></span><br><span class="line">public <span class="function"><span class="title">Server</span></span>()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">/*</span><br><span class="line"> * 创建ServerSocket的同时向系统申请</span><br><span class="line"> * 对外的服务端口.注意,该端口不能和</span><br><span class="line"> * 其他程序冲突,否则会抛出地址被占用</span><br><span class="line"> * 的异常.</span><br><span class="line"> */</span><br><span class="line">server = new ServerSocket(8088);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void <span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">/*</span><br><span class="line"> * ServerSocket提供方法:</span><br><span class="line"> * Socket accept()</span><br><span class="line"> * 该方法是一个阻塞方法,调用后即等待</span><br><span class="line"> * 客户端的连接,一旦一个客户端通过</span><br><span class="line"> * 端口连接,那么accept方法会返回一个</span><br><span class="line"> * Socket实例,通过这个Socket实例就</span><br><span class="line"> * 可以与刚连接的客户端交互了</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">System.out.println(<span class="string">"等待客户端连接..."</span>);</span><br><span class="line">Socket socket = server.accept();</span><br><span class="line">System.out.println(<span class="string">"一个客户端连接了!"</span>);</span><br><span class="line">//启动一个线程,处理该客户端交互工作</span><br><span class="line">ClientHandler handler</span><br><span class="line">= new ClientHandler(socket);</span><br><span class="line">Thread t = new Thread(handler);</span><br><span class="line">t.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Server server = new Server();</span><br><span class="line">server.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 该线程任务负责与指定Socket所对应的客户端</span><br><span class="line"> * 进行交互.</span><br><span class="line"> * @author adminitartor</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">private class ClientHandler</span><br><span class="line">implements Runnable&#123;</span><br><span class="line">//当前线程通过这个Socket与对应客户端交互</span><br><span class="line">private Socket socket;</span><br><span class="line">/**</span><br><span class="line"> * 实例化时将对应客户端的Socket传入</span><br><span class="line"> * @param socket</span><br><span class="line"> */</span><br><span class="line">public ClientHandler(Socket socket)&#123;</span><br><span class="line">this.socket = socket;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void <span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">PrintWriter pw = null;</span><br><span class="line">try &#123;</span><br><span class="line">InputStream <span class="keyword">in</span> = socket.getInputStream();</span><br><span class="line">BufferedReader br = new BufferedReader(</span><br><span class="line">new InputStreamReader(</span><br><span class="line"><span class="keyword">in</span>,<span class="string">"UTF-8"</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">/*</span><br><span class="line"> * 获取输出流,用于给当前客户端回复消息</span><br><span class="line"> */</span><br><span class="line">pw = new PrintWriter(</span><br><span class="line">new BufferedWriter(</span><br><span class="line">new OutputStreamWriter(</span><br><span class="line">socket.getOutputStream(),</span><br><span class="line"><span class="string">"UTF-8"</span></span><br><span class="line">)</span><br><span class="line">),<span class="literal">true</span></span><br><span class="line">);</span><br><span class="line">//将当前客户端对应的输出流存入共享数组</span><br><span class="line">synchronized (allOut) &#123;</span><br><span class="line">////1扩容数组</span><br><span class="line">//allOut = Arrays.copyOf(allOut, allOut.length+1);</span><br><span class="line">////2将输出流存入数组</span><br><span class="line">//allOut[allOut.length-1] = pw;</span><br><span class="line"></span><br><span class="line">allOut.add(pw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 客户端在断开连接时不同系统有不同反应</span><br><span class="line"> * linux的客户端断开后,br.readLine方法会</span><br><span class="line"> * 返回null.</span><br><span class="line"> * windows的客户端断开连接后,br.readLine方法</span><br><span class="line"> * 会直接抛出异常.</span><br><span class="line"> */</span><br><span class="line">String message = null;</span><br><span class="line"><span class="keyword">while</span>((message = br.readLine())!=null)&#123;</span><br><span class="line">System.out.println(<span class="string">"客户端说:"</span>+message);</span><br><span class="line">//回复客户端</span><br><span class="line">//pw.println(<span class="string">"客户端说:"</span>+message);</span><br><span class="line">//发送给所有客户端</span><br><span class="line">synchronized (allOut) &#123;</span><br><span class="line">//<span class="keyword">for</span>(int i=0;i&lt;allOut.length;i++)&#123;</span><br><span class="line">//allOut[i].println(<span class="string">"客户端说:"</span>+message);</span><br><span class="line">//&#125;</span><br><span class="line"><span class="keyword">for</span>(PrintWriter o : allOut)&#123;</span><br><span class="line">o.println(<span class="string">"客户端说:"</span>+message);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125; finally&#123;</span><br><span class="line">//处理客户端断开连接后的操作</span><br><span class="line"></span><br><span class="line">//1将该客户端的输出流从共享数组中删除</span><br><span class="line">synchronized (allOut) &#123;</span><br><span class="line">//<span class="keyword">for</span>(int i=0;i&lt;allOut.length;i++)&#123;</span><br><span class="line">//<span class="keyword">if</span>(allOut[i]==pw)&#123;</span><br><span class="line">////将最后一个元素放入当前位置</span><br><span class="line">//allOut[i] = allOut[allOut.length-1];</span><br><span class="line">////缩容</span><br><span class="line">//allOut = Arrays.copyOf(allOut, allOut.length-1);</span><br><span class="line">//<span class="built_in">break</span>;</span><br><span class="line">//&#125;</span><br><span class="line">//&#125;</span><br><span class="line">allOut.remove(pw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * 2客户端断开连接后,服务端关闭</span><br><span class="line"> * 该客户端Socket,释放资源</span><br><span class="line"> */</span><br><span class="line">try &#123;</span><br><span class="line">socket.close();</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="聊天室客户端"><a href="#聊天室客户端" class="headerlink" title="聊天室客户端"></a>聊天室客户端</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line">public class Client &#123;</span><br><span class="line">/*</span><br><span class="line"> * java.net.Socket</span><br><span class="line"> * 套接字,封装了TCP协议.Socket提供了两条流</span><br><span class="line"> * 用来与服务端进行双向通讯.</span><br><span class="line"> */</span><br><span class="line">private Socket socket;</span><br><span class="line">/**</span><br><span class="line"> * 构造方法,用来初始化客户端</span><br><span class="line"> */</span><br><span class="line">public <span class="function"><span class="title">Client</span></span>()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">/*</span><br><span class="line"> * 实例化Socket就是连接服务端的过程</span><br><span class="line"> * 参数1:服务端地址</span><br><span class="line"> * 参数2:服务端开启的服务端口</span><br><span class="line"> *</span><br><span class="line"> * 通过服务端IP地址可以找到服务端所处</span><br><span class="line"> * 计算机,再通过端口找到运行在服务端</span><br><span class="line"> * 计算机上的服务端应用程序.</span><br><span class="line"> */</span><br><span class="line">socket = new Socket(<span class="string">"localhost"</span>,8088);</span><br><span class="line">&#125; catch (IOException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * 客户端开始工作的方法</span><br><span class="line"> */</span><br><span class="line">public void <span class="function"><span class="title">start</span></span>()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">//先启动线程接收服务端发送的消息</span><br><span class="line">ServerHandler handler = new ServerHandler();</span><br><span class="line">Thread t = new Thread(handler);</span><br><span class="line">t.start();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Scanner scanner = new Scanner(System.in);</span><br><span class="line">/*</span><br><span class="line"> * Socket提供方法:</span><br><span class="line"> * OutputStream getOutputStream()</span><br><span class="line"> * 通过返回的字节输出流写出的数据会发送</span><br><span class="line"> * 给远端计算机,对于客户端这边而言远端</span><br><span class="line"> * 计算机就是服务端了.</span><br><span class="line"> */</span><br><span class="line">OutputStream out</span><br><span class="line">= socket.getOutputStream();</span><br><span class="line">PrintWriter pw = new PrintWriter(</span><br><span class="line">new BufferedWriter(</span><br><span class="line">new OutputStreamWriter(</span><br><span class="line">out,<span class="string">"UTF-8"</span></span><br><span class="line">)</span><br><span class="line">),<span class="literal">true</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">String line = scanner.nextLine();</span><br><span class="line">pw.println(line);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Client client = new Client();</span><br><span class="line">client.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 该线程负责循环接收服务端发送过来的消息.</span><br><span class="line"> * 给服务端发送消息与接收服务端发过来的消息</span><br><span class="line"> * 要放在两个不同的线程要运行,这样才能做到</span><br><span class="line"> * 互相不干扰.</span><br><span class="line"> * @author adminitartor</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">private class ServerHandler</span><br><span class="line">implements Runnable&#123;</span><br><span class="line">public void <span class="function"><span class="title">run</span></span>()&#123;</span><br><span class="line">try &#123;</span><br><span class="line">BufferedReader br = new BufferedReader(</span><br><span class="line">new InputStreamReader(</span><br><span class="line">socket.getInputStream(),</span><br><span class="line"><span class="string">"UTF-8"</span></span><br><span class="line">)</span><br><span class="line">);</span><br><span class="line">String message = null;</span><br><span class="line"><span class="keyword">while</span>((message = br.readLine())!=null)&#123;</span><br><span class="line">System.out.println(message);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019年5月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Demo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IO流</title>
      <link href="/2019/05/01/J_IO%E6%B5%81/"/>
      <url>/2019/05/01/J_IO%E6%B5%81/</url>
      
        <content type="html"><![CDATA[<h4 id="IO流"><a href="#IO流" class="headerlink" title="IO流"></a>IO流</h4><ol><li><p>java提供了标准的IO操作,即:输入与输出</p><a id="more"></a></li><li><p>IO的作用是可以让我们的程序与外界进行数据交换.比如从网络读写数据,读取键盘数据,读写文件数据等等.</p></li><li><p>标准的IO根据将功能按照方向划分</p><ul><li>输入:从外界到程序中的过程,这是”读”的过程</li><li>输出:从程序发送至外界的过程,这是”写”的过程</li></ul></li></ol><blockquote><p>学习IO的重点:理解流链接操作,通过应用流连接,按照需求组合高级流与低级流,完成读写操作.</p></blockquote><ol start="4"><li><p>流分为:节点流(低级流),处理流(高级流)</p><ul><li>节点流:实际链接程序与另一端的管道,负责在两端之间传送数据.注意:读写一定是建立在节点流的基础上进行的.</li><li>处理流:不能独立存在,可以链接在其他流上,处理流自带某种对数据的加工操作,所以数据流经该流会对这些数据进行处理,这样可以简化我们对数据的处理操作.</li></ul></li><li><p>java.io.InputStream</p><ul><li>所有字节输入流的父类,是一个抽象类,规定了所有字节输入流都必须具备的读取字节的方法</li></ul></li><li><p>java.io.OutputStream</p><ul><li>所有字节输出流的父类,是一个抽象类,规定了所有字节输出流都必须具备的写出字节的方法</li></ul></li><li><p>文件流</p><ul><li>文件流是一套低级流,作用是读写文件数据.</li><li>文件输出流支持的两种写模式:<ul><li>覆盖写操作,即:若写出的文件有数据,则将原有数据全部删除,将本次通过流写出的内容作为文件数据.<br><code>FileOutputStream(String path)</code>, <code>FileOutputStream(File file)</code></li><li>追加写操作,若文件有数据则全部保留,从该文件末尾追加内容<br><code>FileOutputStream(String path,boolean append)</code><br><code>FileOutputStream(File file,boolean append)</code></li></ul></li></ul></li><li><p>文件流与RandomAccessFile的对比:</p><ul><li>1:论功能是一致的,都是用来读写文件数据</li><li>2:RAF对于文件即可读也可写,但是文件流不行,文件输入流只用来读文件数据,文件输出流用来向文件中写入数据</li><li>流的特点是顺序读写操作,即:读写是不能回退的.RAF是随机读写操作,因为依靠指针位置进行读写,所以可以通过操作指针对文件任意位置随意读写.</li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> 2019年5月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流的注册和读取</title>
      <link href="/2019/05/01/J_%E6%B5%81%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E8%AF%BB%E5%8F%96/"/>
      <url>/2019/05/01/J_%E6%B5%81%E7%9A%84%E6%B3%A8%E5%86%8C%E5%92%8C%E8%AF%BB%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h4 id="完成用户注册功能"><a href="#完成用户注册功能" class="headerlink" title="完成用户注册功能"></a>完成用户注册功能</h4><ul><li>用user.dat文件保存用户信息</li><li>每个用户的信息包括:用户名,密码,昵称,年龄</li><li>其中年龄是int值,其余都是字符串.</li></ul><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">public class Test1 &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">RandomAccessFile raf</span><br><span class="line">= new RandomAccessFile(<span class="string">"user.dat"</span>,<span class="string">"rw"</span>);</span><br><span class="line">//先将指针移动到文件末尾,以便追加新记录</span><br><span class="line">raf.seek(raf.length());</span><br><span class="line"></span><br><span class="line">String name = <span class="string">"测试"</span>;</span><br><span class="line">String password = <span class="string">"123456"</span>;</span><br><span class="line">String nickname = <span class="string">"测"</span>;</span><br><span class="line">int age = 18;</span><br><span class="line">/*</span><br><span class="line"> * 每条记录占用100字节,其中用户名,密码,</span><br><span class="line"> * 昵称各占32字节,int型的age占4字节.</span><br><span class="line"> * 数据<span class="string">"留白"</span>的目的是便于后期修改信息.</span><br><span class="line"> */</span><br><span class="line">//写用户名</span><br><span class="line">byte[] data = name.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">data = Arrays.copyOf(data, 32);</span><br><span class="line">raf.write(data);//一次写了32字节</span><br><span class="line"></span><br><span class="line">data = password.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">data = Arrays.copyOf(data, 32);</span><br><span class="line">raf.write(data);</span><br><span class="line"></span><br><span class="line">data = nickname.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">data = Arrays.copyOf(data, 32);</span><br><span class="line">raf.write(data);</span><br><span class="line"></span><br><span class="line">raf.writeInt(age);</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"注册完毕!"</span>);</span><br><span class="line">raf.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="将每个用户信息输出"><a href="#将每个用户信息输出" class="headerlink" title="将每个用户信息输出"></a>将每个用户信息输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">public class Test2 &#123;</span><br><span class="line">public static void main(String[] args) throws IOException &#123;</span><br><span class="line">RandomAccessFile raf</span><br><span class="line">= new RandomAccessFile(<span class="string">"user.dat"</span>,<span class="string">"r"</span>);</span><br><span class="line">/*</span><br><span class="line"> * 将每个用户信息输出格式:user,<span class="built_in">pwd</span>,nick,age</span><br><span class="line"> */</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;raf.length()/100;i++)&#123;</span><br><span class="line">//读用户名</span><br><span class="line">byte[] data = new byte[32];</span><br><span class="line">raf.read(data);</span><br><span class="line">String name = new String(data,<span class="string">"UTF-8"</span>).trim();</span><br><span class="line">//读密码</span><br><span class="line">raf.read(data);</span><br><span class="line">String <span class="built_in">pwd</span> = new String(data,<span class="string">"UTF-8"</span>).trim();</span><br><span class="line">//读昵称</span><br><span class="line">raf.read(data);</span><br><span class="line">String nickname = new String(data,<span class="string">"UTF-8"</span>).trim();</span><br><span class="line">//读年龄</span><br><span class="line">int age = raf.readInt();</span><br><span class="line">System.out.println(name+<span class="string">","</span>+<span class="built_in">pwd</span>+<span class="string">","</span>+nickname+<span class="string">","</span>+age);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019年5月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>鼠标移动自动闪开</title>
      <link href="/2019/04/29/H_%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E8%87%AA%E5%8A%A8%E9%97%AA%E5%BC%80/"/>
      <url>/2019/04/29/H_%E9%BC%A0%E6%A0%87%E7%A7%BB%E5%8A%A8%E8%87%AA%E5%8A%A8%E9%97%AA%E5%BC%80/</url>
      
        <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;canvas id=<span class="string">"pane"</span> width=<span class="string">"1024"</span> height=<span class="string">"520"</span>&gt;&lt;/canvas&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">      var no = new Image(); no.src = <span class="string">"images/no.png"</span>;</span><br><span class="line">      var canvas = document.getElementById(<span class="string">'pane'</span>);</span><br><span class="line">      var ctx = canvas.getContext(<span class="string">'2d'</span>);</span><br><span class="line">      var btnN = new Btn(564,402,686,294,no);</span><br><span class="line">      setInterval(<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">          btnN.paintBtn();</span><br><span class="line">      &#125;);</span><br><span class="line"></span><br><span class="line">      canvas.onmousemove = <span class="keyword">function</span>(evt)&#123;</span><br><span class="line">        var e = evt||event;</span><br><span class="line">        <span class="keyword">if</span>(btnN.contains(e.x+331, e.y+138))&#123;//鼠标靠近图片x331,y138的地方</span><br><span class="line">            btnN.x = Math.floor((Math.random() * 190) + 648);</span><br><span class="line">            btnN.y = Math.floor((Math.random() * 190) + 210);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> Btn(pointx,pointy,x,y,say)&#123;</span><br><span class="line">      this.x=x; this.y=y;</span><br><span class="line">      this.pointx=pointx; this.pointy=pointy;</span><br><span class="line">      this.paintBtn=<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">        ctx.save();//保存当前画布状态</span><br><span class="line">        ctx.translate(this.x, this.y);//函数用于在二维空间中移动一个元素。</span><br><span class="line">        var a = Math.atan((this.y- this.pointy)/(this.x - this.pointx));</span><br><span class="line">        a=a&lt;0?a+Math.PI:a;</span><br><span class="line">        ctx.rotate(a);//旋转</span><br><span class="line">        ctx.restore();//恢复最近一近的画布保存状态</span><br><span class="line">        ctx.drawImage(say,this.x-say.naturalWidth/2,this.y-say.naturalHeight/2);</span><br><span class="line">      &#125;;</span><br><span class="line">      this.contains = <span class="keyword">function</span>(ex,ey)&#123;</span><br><span class="line">        <span class="built_in">return</span> Math.sqrt(Math.pow((ex-this.x),2)+Math.pow((ey-this.y),2))&lt;50;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>猜数字小游戏</title>
      <link href="/2019/04/27/J_java%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
      <url>/2019/04/27/J_java%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><blockquote><p>随机生成一个数字,然后开始猜的一个游戏<br><a id="more"></a></p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line">import java.util.Scanner;</span><br><span class="line"></span><br><span class="line">public class Guessing &#123;</span><br><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">Scanner scan = new Scanner(System.in);</span><br><span class="line">char[] chs = generate(); //获取随机字符数组</span><br><span class="line">//System.out.println(chs); //作弊</span><br><span class="line">int count = 0; //猜错的次数</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123; //自造死循环</span><br><span class="line">System.out.println(<span class="string">"猜吧!"</span>);</span><br><span class="line">String str = scan.nextLine().toUpperCase(); //接收用户输入的字符串并转换为大写字母</span><br><span class="line"><span class="keyword">if</span>(str.equals(<span class="string">"EXIT"</span>)) &#123; //判断字符串内容是否是EXIT</span><br><span class="line">System.out.println(<span class="string">"下次再来吧!"</span>);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">char[] input = str.toCharArray(); //将字符串转换为字符数组</span><br><span class="line">int[] result = check(chs,input); //对比:随机字符数组与用户输入的字符数组</span><br><span class="line"><span class="keyword">if</span>(result[0]==chs.length) &#123;</span><br><span class="line">int score = 100*chs.length-10*count; //1个字符100分，猜错一次扣10分</span><br><span class="line">System.out.println(<span class="string">"恭喜你猜对了，得分为:"</span>+score);</span><br><span class="line"><span class="built_in">break</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">count++;</span><br><span class="line">System.out.println(<span class="string">"字符对个数为:"</span>+result[1]+<span class="string">"，位置对个数为:"</span>+result[0]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//生成随机字符数组chs</span><br><span class="line">public static char[] <span class="function"><span class="title">generate</span></span>() &#123;</span><br><span class="line">char[] chs = new char[5]; //随机字符数组</span><br><span class="line">char[] letters = &#123; <span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>, <span class="string">'D'</span>, <span class="string">'E'</span>, <span class="string">'F'</span>, <span class="string">'G'</span>, <span class="string">'H'</span>, <span class="string">'I'</span>, <span class="string">'J'</span>,</span><br><span class="line"><span class="string">'K'</span>, <span class="string">'L'</span>, <span class="string">'M'</span>, <span class="string">'N'</span>, <span class="string">'O'</span>, <span class="string">'P'</span>, <span class="string">'Q'</span>, <span class="string">'R'</span>, <span class="string">'S'</span>, <span class="string">'T'</span>, <span class="string">'U'</span>, <span class="string">'V'</span>,</span><br><span class="line"><span class="string">'W'</span>, <span class="string">'X'</span>, <span class="string">'Y'</span>, <span class="string">'Z'</span> &#125;; //随机字符范围数组</span><br><span class="line">boolean[] flags = new boolean[letters.length]; //标记数组</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;chs.length;i++) &#123; //遍历随机字符数组</span><br><span class="line">int index;</span><br><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">index = (int)(Math.random()*letters.length); //随机下标(0到25之间)</span><br><span class="line">&#125;<span class="keyword">while</span>(flags[index]==<span class="literal">true</span>); //下标index对应的标记为<span class="literal">true</span>，表示对应字符已经使用过，则重新生成index下标</span><br><span class="line">chs[i] = letters[index]; //基于下标index获取对应的字符并赋值给chs中的每一个元素</span><br><span class="line">flags[index] = <span class="literal">true</span>; //将下标index对应的标记修改为<span class="literal">true</span>，表示对应字符已存过</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> chs;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//对比:随机字符数组chs与用户输入的字符数组input</span><br><span class="line">public static int[] check(char[] chs,char[] input) &#123;</span><br><span class="line">int[] result = new int[2]; //对比结果(0,0)--假设result[1]为字符对，result[0]为位置对</span><br><span class="line"><span class="keyword">for</span>(int i=0;i&lt;chs.length;i++) &#123; //遍历随机字符数组</span><br><span class="line"><span class="keyword">for</span>(int j=0;j&lt;input.length;j++) &#123; //遍历用户输入的字符数组</span><br><span class="line"><span class="keyword">if</span>(chs[i]==input[j]) &#123; //字符对</span><br><span class="line">result[1]++; //字符对个数增1</span><br><span class="line"><span class="keyword">if</span>(i==j) &#123; //位置对</span><br><span class="line">result[0]++; //位置对个数增1</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">break</span>; //剩余input元素不再参与比较了</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 游戏 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基本数据类型</title>
      <link href="/2019/04/27/J_java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2019/04/27/J_java%E5%9F%BA%E6%9C%AC%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><a id="more"></a><ul><li>int:整形,4个字节<ul><li>整数直接量默认为int类型，但不能超范围，超范围则编译错误</li><li>两个整数相除，结果还是整数，小数位无条件舍弃(不会四舍五入)</li><li>整数运算时若超出范围会发生溢出，溢出是需要避免的</li></ul></li><li>long:长整型，8个字节<ul><li>长整型的直接量，需在数字后加L或l</li><li>运算时若有可能溢出，建议在第1个数字后加L</li><li>System.currentTimeMillis()用于获取自1970.1.1零时到此时此刻的毫秒数</li></ul></li><li>double:浮点型，8个字节(精确运算场合不能用double)<ul><li>浮点数直接量默认为double型，若想表示float需在数字后加F或f</li><li>double和float型数据参与运算时，有可能会出现舍入误差</li></ul></li><li>boolean:布尔型，1个字节<ul><li>只能取值为true或false</li></ul></li><li>char:字符型，2个字节<ul><li>采用Unicode字符集编码，每个字符对应一个码,表现的形式是字符char，但本质上是码int(0到65535之间),<code>&#39;a&#39;=97  &#39;A&#39;=65  &#39;0&#39;=48</code></li><li>字符型直接量必须放在单引号中，只能有一个</li><li>特殊符号需要通过<code>\</code>来转义</li></ul></li></ul><blockquote><p>财务ERP—————–BigDecimal</p></blockquote><h4 id="基本数据类型间的转换"><a href="#基本数据类型间的转换" class="headerlink" title="基本数据类型间的转换:"></a>基本数据类型间的转换:</h4><ul><li>数据类型从小到大依次为:byte-short-int(char)-long-float-double</li><li>自动类型转换:小类型到大类型</li><li>强制类型转换:大类型到小类型<ul><li>语法: (要转换成为的数据类型)变量,强转有可能会发生溢出或精度的丢失</li></ul></li><li>整数直接量可以直接赋值给byte、short、char，但不能超出范围</li><li>byte、short、char型数据参与运算时，先一律转换为int再运算</li></ul><h4 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h4><ul><li>只能包含字母、数字、<code>_</code>和$符，并且不能以数字开头</li><li>严格区分大小写</li><li>不能使用关键字</li><li>可以中文命名，但不建议,建议”英文的见名知意”、”驼峰命名法”</li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><blockquote><p>int的最大值和最小值的变换</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int balance = 2147483647;</span><br><span class="line">balance = balance+1; //-2147483648(最小值)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java基础</title>
      <link href="/2019/04/27/J_java%E4%BB%8B%E7%BB%8D/"/>
      <url>/2019/04/27/J_java%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<h4 id="Java开发环境"><a href="#Java开发环境" class="headerlink" title="Java开发环境"></a>Java开发环境</h4><ul><li>编译运行过程<ul><li>编译期:.java源文件,经过编译,生成.class字节码文件</li><li>运行期: JVM加载.class并运行.class<ul><li>.java文件–通过javac命令—编译—.class文件</li><li>.class文件—通过java命令–运行–结果<a id="more"></a></li></ul></li></ul></li></ul><blockquote><p>特点:跨平台,一次编程到处使用(显示中一般需要重新编写)</p></blockquote><ul><li>JVM:<code>java虚拟机</code>,加载.class并运行.class<ul><li>事先在对应的操作系统上安装对应版本的JVM，java 程序是在JVM中进行执行，使得不同的操作系统只要是同一java程序的得到的结果是一样的</li></ul></li><li>JRE:<code>java运行环境</code>(Java Runtime Environment)除了包含JVM以外还包含了运行java程序所必须的环境<ul><li>JVM+java系统类库(API)</li></ul></li><li>JDK:<code>java开发工具包</code>(java Devlopment Kit),除了包含JRE以外还包含了开发java程序所必须的命令工具<ul><li>JDK=JRE+编译,运行等命令工具</li></ul></li><li>运行java程序的最小环境是JRE</li><li>开发java程序的最小环境是JDK</li></ul><p>####配置环境变量</p><ul><li>JVAV_HOME:指向jdk的安装路径</li><li>CLASSPATH:表示类的搜索路径</li><li>PATH:指向jdk下的bin目录</li></ul><p>####注意事项</p><ol><li>.class文件名和类名保持一致</li><li>公共类的类名要和.java文件名保持一致</li><li>一个.java文件可以支持多个类，但是最多只能有一个公共类(public class)</li><li>.java文件可以创建过个类，有几个类就能编译生产几个.class文件，如果.java文件中的类名出现大小写最后的结果就是最后一个类的内容</li></ol>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>svn的搭建和使用</title>
      <link href="/2019/04/21/Z_%E7%A6%BB%E7%BA%BF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAsvn%E5%B9%B6%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/04/21/Z_%E7%A6%BB%E7%BA%BF%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BAsvn%E5%B9%B6%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<blockquote><p>因为公司使用的是内网，所以只能用下载安装包的办法来搭建</p></blockquote><h4 id="一、需要下载的安装包"><a href="#一、需要下载的安装包" class="headerlink" title="一、需要下载的安装包"></a>一、需要下载的安装包</h4><ul><li><a href="http://subversion.apache.org/download/" target="_blank" rel="noopener">subversion-1.11.1.tar.gz</a></li><li><a href="https://www.sqlite.org/download.html" target="_blank" rel="noopener">sqlite-autoconf-3280000.tar.gz</a></li><li><a href="http://apr.apache.org/download.cgi" target="_blank" rel="noopener">apr-1.7.0.tar.gz</a></li><li><a href="http://apr.apache.org/download.cgi" target="_blank" rel="noopener">apr-util-1.6.1.tar.gz</a></li><li><a href="https://linux.softpedia.com/get/Programming/Libraries/zlib-159.shtml" target="_blank" rel="noopener">zlib 1.2.11.tar.xz</a></li><li>当安装apr-util出错时，需要安装<a href="http://ftp.tc.edu.tw/Linux/ubuntu/pool/main/e/expat/" target="_blank" rel="noopener">expat_2.0.1.orig.tar.gz</a></li></ul><a id="more"></a><h4 id="二、解压当前包"><a href="#二、解压当前包" class="headerlink" title="二、解压当前包"></a>二、解压当前包</h4><ul><li><code>tar -tar -xzvf 需要解压的包</code></li><li>在home下新建svn文件夹</li></ul><h4 id="三、开始安装"><a href="#三、开始安装" class="headerlink" title="三、开始安装"></a>三、开始安装</h4><ul><li><p>安装apr</p><ul><li><code>cd apr-1.7.0</code></li><li><code>./configure prefix=/home/svn/apr-1.7.0</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li><li><p>安装 apr-uill</p><ul><li><code>cd apr-util-1.6.1</code></li><li><code>./configure prefix=/home/svn/apr-util-1.6.1 --with-apr=/home/svn/apr-1.7.0</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li><li><p>当apr-util出错时</p><ul><li><code>cd expat-2.0.1</code></li><li><code>./configure</code></li><li><code>make</code></li><li><code>make install</code></li><li>重新安装apr-util</li></ul></li><li><p>安装zlib</p><ul><li><code>cd zlib-1.2.11</code></li><li><code>./configure prefix=/home/svn/zlib-1.2.11</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li><li><p>安装sqllite</p><ul><li><code>mv sqlite-autoconf-3280000 ./subversion-1.9.7/sqlite-amalgamation</code></li></ul></li><li><p>安装subversion</p><ul><li><code>cd subversion-1.11.1</code></li><li><code>./configure prefix=/home/svn/subversion-1.11.1 --with-apr=/home/svn/apr-1.7.0 --with-apr-util=/home/svn/apr-util-1.6.1 --with-zlib=/home/svn/zlib</code></li><li><code>make</code></li><li><code>make install</code></li></ul></li></ul><h4 id="四、将svn加入path，并验证安装是否成功"><a href="#四、将svn加入path，并验证安装是否成功" class="headerlink" title="四、将svn加入path，并验证安装是否成功"></a>四、将svn加入path，并验证安装是否成功</h4><ul><li><code>cd</code></li><li><code>vim .bash_profile</code></li><li><code>:i</code></li><li><code>PATH=/home/svn/subversion-1.11.1/bin:$PATH</code></li><li>保存退出</li><li><code>. .bash_profile</code></li><li>在ect/bash_profile里也加一下path</li><li><code>. profile</code></li><li>验证<ul><li><code>svnserve --version</code></li><li>出现版本号即验证成功</li></ul></li></ul><h4 id="五、配置仓库"><a href="#五、配置仓库" class="headerlink" title="五、配置仓库"></a>五、配置仓库</h4><ul><li><code>mkdir -p myproject</code></li><li><code>svnadmin create /home/svn/myproject</code></li><li>修改配置文件<ul><li><code>cd myproject/conf</code></li><li><code>vim subversion.conf</code></li><li>将以下几项前的#删除，并顶格编写<ul><li>anon-access = none # 使非授权用户无法访问</li><li>auth-access = write # 使授权用户有写权限</li><li>password-db = /opt/svndata/repos/conf/passwd  # 指明密码文件路径</li><li>authz-db = /opt/svndata/repos/conf/authz    # 访问控制文件</li><li>realm = /opt/svndata/repos   # 认证命名空间，subversion会在认证提示里显示，并且作为凭证缓存的关键字.</li><li>保存并退出</li></ul></li><li><code>vim passwd</code></li><li>输入以下内容：<ul><li>admin = admin</li><li>username2 = password2</li><li>可以添加多个，此为用户名密码对。保存并退出</li></ul></li><li><code>vim authz</code></li><li>&lt;用户组名&gt; = &lt;用户1&gt;,&lt;用户2&gt;, 其中，1个用户组可以包含1个或多个用户，用户间以逗号分隔。</li><li>别忘了<code>[/]</code>和<code>* = rw</code></li><li>保存退出</li></ul></li></ul><h4 id="六、启动服务"><a href="#六、启动服务" class="headerlink" title="六、启动服务"></a>六、启动服务</h4><ul><li><code>svnserve -d 版本库路径 --listen 端口号 -r /home/svn/myproject</code></li><li>例如<code>svnserve -d --listen-port 3690 -r /home/svn/myproject</code></li><li>启动后，可在进程中查找是否已启动svn服务<code>ps - ef|grep svn</code></li></ul><h4 id="七、开通端口，开通防火墙端口"><a href="#七、开通端口，开通防火墙端口" class="headerlink" title="七、开通端口，开通防火墙端口"></a>七、开通端口，开通防火墙端口</h4><blockquote><p>这步我没操作，不过看网上的大大有写，具体可以看<a href="https://www.jianshu.com/p/7cfdc0086b5a" target="_blank" rel="noopener">大大</a>们的</p></blockquote><h4 id="八、访问服务"><a href="#八、访问服务" class="headerlink" title="八、访问服务"></a>八、访问服务</h4><ul><li>安装<a href="https://tortoisesvn.net/" target="_blank" rel="noopener">TortoiseSVN.msi</a>,新建一个文件夹，右键，选择<code>svn</code>检测，输入<code>svn://SVN服务器的IP地址</code>,点击确定，弹出一个框，输入账号密码，账号密码是第五步设置的那几个</li><li>把你团队需要的东西放进新建的文件夹，add后commit就行了</li></ul><h4 id="九、最后感言"><a href="#九、最后感言" class="headerlink" title="九、最后感言"></a>九、最后感言</h4><blockquote><p>安装不易，且安且珍惜</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建过程</title>
      <link href="/2019/04/07/H_%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/"/>
      <url>/2019/04/07/H_%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在假期搭建了博客，功能还在完善，但基本可以使用</p></blockquote><h4 id="首先："><a href="#首先：" class="headerlink" title="首先："></a>首先：</h4><ul><li>我先去<a href="https://www.bilibili.com/video/av44544186?from=search&amp;seid=14292921653194920914" target="_blank" rel="noopener">bilibili</a>学习了一下搭建博客的视频</li><li>跟着视频就能做出一个成功的范例，-。-</li></ul><a id="more"></a><h4 id="然后："><a href="#然后：" class="headerlink" title="然后："></a>然后：</h4><ul><li>想着把内容记下来，然后去找了一下相关的教程，重新做了一遍</li><li>我是用window 7安装的hexo，用系统自带的cmd，先去hexo官网下载hexo安装包</li><li>用淘宝镜像源<code>$ npm install -g cnpm --registry=https://registry.npm.taobao.org</code>，不仅因为速度的原因，在后面的操作中，用npm下载失败而用cnpm下载成功</li><li><code>$ cnpm install -g hexo-cli</code>安装hexo</li><li>进入放置Blog的一个空白的文件夹，<code>hexo init</code>初始化博客</li><li><code>hexo s</code>启动博客，打开浏览器，输入<code>http://localhost:4000</code>就可以打开你的博客了</li><li>进入<code>source\_posts</code>,新建一个md文件，就是第一篇博客</li><li>然后<code>hexo g</code>生成静态文件</li></ul><h4 id="接着："><a href="#接着：" class="headerlink" title="接着："></a>接着：</h4><ul><li>新建一个 <code>github</code>的账号，新建一个和你账号名一样的仓库，以我为例<code>anqingliu.github.io</code></li><li>然后下载一个插件<code>cnpm install hexo-deployer-git --save</code></li><li>打开hexo文件里的<code>_config.yml</code></li><li><p>写上你自己博客的地址，如果第一次上传，需要你的账号和密码</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">type</span>: git</span><br><span class="line">repo: git@github.com:Anqingliu/Anqingliu.github.io.git</span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure></li><li><p>用<code>hexo d</code>上送你的博客</p></li></ul><h4 id="最后："><a href="#最后：" class="headerlink" title="最后："></a>最后：</h4><ul><li>选一个你喜欢的主题，用<code>git clone https://github.com/xaoxuu/hexo-theme-material-x themes/material-x</code></li><li>修改你的<code>_config.yml</code>文件为<code>theme: material-x</code></li><li><code>hexo clean</code>先清除一下原有格式化</li><li><code>hexo g</code>重新生成</li><li><code>hexo d</code>上送到github</li></ul>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试发文</title>
      <link href="/2019/04/07/H_Test/"/>
      <url>/2019/04/07/H_Test/</url>
      
        <content type="html"><![CDATA[<h2 id="测试发文"><a href="#测试发文" class="headerlink" title="测试发文"></a>测试发文</h2><a id="more"></a><p>你好，安晴！</p>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 测试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo的简介和使用</title>
      <link href="/2019/04/07/H_hello-world/"/>
      <url>/2019/04/07/H_hello-world/</url>
      
        <content type="html"><![CDATA[<blockquote><p>注：这个博客使用了hexo搭建</p></blockquote><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 2019年4月 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
